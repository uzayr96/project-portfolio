{"title":"Financial Analysis","markdown":{"yaml":{"title":"Financial Analysis","date":"2025-04-19","orientation":"rows","format":{"dashboard":{"scrolling":true,"theme":["custom.scss"]}}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\n## Stock Overview\n\n```{python}\nimport pandas as pd\nimport requests as re\nimport yfinance as yf\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom data import *\nfrom itables import show\nticker = 'GOOG'\n\ndef format_trillions(x):\n    if x >= 1e12:\n        return f'{round(x / 1e12, 2)}T'  # Rounds to 1 decimal place\n    else:\n        return x\n\n```\n\n```{python}\n#| content: valuebox\n#| title: Company\n#| freeze: true\n#| fill: true\n#| cache: true\ncompany_name = get_name(ticker=ticker)\ndict(\n    icon = \"google\",\n    color = \"#00927B\",\n    value = company_name\n)\n```\n\n```{python}\n#| content: valuebox\n#| title: Stock\n#| freeze: true\n#| fill: true\n#| cache: true\nstock_price = get_price(ticker=ticker)\n\ndict(\n    icon = \"currency-dollar\",\n    color = \"#00927B\",\n    value = stock_price\n    \n    )\n```\n\n```{python}\n#| content: valuebox\n#| title: Change\n#| fill: true\n#| freeze: true\n#| cache: true\nchange_pr = get_change(ticker=ticker)\nicon_1 = \"chevron-up\" if change_pr > 0 else \"chevron-down\"\ndict(\n    icon = icon_1,\n    color = \"#00927B\",\n    value = f\"{change_pr} %\"\n)\n```\n\n```{python}\n#| content: valuebox\n#| title: Market Cap\n#| fill: true\n#| freeze: true\n#| cache: true\nmarket_cap = get_market_cap(ticker=ticker)\nmarket_cap = format_trillions(market_cap)\ndict(\n    icon = \"bank\",\n    color = \"#00927B\",\n    value = market_cap\n)\n```\n\n## Plot\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: Revenue\n#| fill: true\n#| freeze: true\n#| cache: true\nincome_statement = get_income_statement(ticker)\n\n\nfig_1 = px.bar(data_frame = income_statement,x= income_statement['asOfDate'].dt.year, y=['TotalRevenue'], color_discrete_map={\n        'TotalRevenue': '#00927B'\n    })\n\nfig_1 = fig_1.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',bargap=0.4,showlegend=False,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\nfig_1 = fig_1.update_xaxes(type='category')\nfig_1 = fig_1.update_yaxes(ticklabelposition=\"inside top\", title=None)\nfig_1.show()\n\n\n```\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: Net Income\n#| fill: true\n#| freeze: true\n#| cache: true\nfig_2 = go.Figure(go.Bar(\n            x=income_statement[\"asOfDate\"].dt.year,\n            y=income_statement[\"NetIncome\"],\n            marker=dict(\n        color='#00927B'\n    )\n        ))\n\nfig_2 = fig_2.update_layout(\n    xaxis_title=None,\n    yaxis_title=None,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    bargap=0.4,\n    showlegend=False,\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\n\n\nfig_2 = fig_2.update_xaxes(type='category')\nfig_2.show()\n\n```\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: \"EPS\"\n#| fill: true\n#| freeze: true\n#| cache: true\nfig_3 = go.Figure(go.Bar(\n            x=income_statement[\"asOfDate\"].dt.year,\n            y=income_statement[\"BasicEPS\"],\n            marker=dict(\n        color='#00927B'\n    )\n        ))\n\n\n\nfig_3 = fig_3.update_layout(\n    xaxis_title=None,\n    yaxis_title=None,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    bargap=0.4,\n    showlegend=False,\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\n\nfig_3 = fig_3.update_xaxes(type='category')\n\nfig_3.show()\n\n```\n\n## CashAssets \n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: \"Assets\"\n#| fill: true\n#| freeze: true\n#| cache: true\nbalance_sheet = get_balance_sheet(ticker=ticker)\n\nfig_4 = px.bar(data_frame = balance_sheet,x=balance_sheet['asOfDate'].dt.year, y=['TotalAssets'], color_discrete_map={\n        'TotalAssets': '#00927B'\n    })\n\nfig_4 = fig_4.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)', showlegend=False, bargap=0.4,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\n\nfig_4 = fig_4.update_xaxes(type='category')\n\nfig_4.show()\n\n```\n\n\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: Liabilities\n#| fill: true\n#| freeze: true\n#| cache: true\nfig_5 = px.bar(x=balance_sheet['asOfDate'].dt.year, y=balance_sheet['TotalDebt'])\n\n\nfig_5 = fig_5.update_traces(marker_color='#00927B')\n\nfig_5 = fig_5.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',showlegend=False, bargap=0.4,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n    )\n\nfig_5 = fig_5.update_xaxes(type='category')\n\nfig_5.show()\n\n```\n\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: \"Free Cash Flow\"\n#| fill: true\n#| freeze: true\n#| cache: true\ncash_flow = get_cash_flow_statement(ticker=ticker)\n\nfig_6 = px.bar(x=cash_flow['asOfDate'].dt.year, y=cash_flow['FreeCashFlow'])\n\n\nfig_6 = fig_6.update_traces(marker_color='#00927B')\n\nfig_6 = fig_6.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)', showlegend=False, bargap=0.4,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n    )\n\nfig_6 = fig_6.update_xaxes(type='category')\nfig_6.show()\n\n```\n\n\n\n\n\n# Valuation\n\n## Stats\n\n```{python}\n#| content: valuebox\n#| title: P/E Ratio\n#| fill: true\n#| freeze: true\n#| cache: true\npe_ratio = round(get_pe_ratio(ticker=ticker),2)\n\ndict(\n    icon = \"ratio\",\n    color = \"#00927B\",\n    value = pe_ratio\n    \n    )\n```\n\n\n\n```{python}\n#| content: valuebox\n#| title: Current Price\n#| fill: true\n#| freeze: true\n#| cache: true\ndict(\n    icon = \"currency-dollar\",\n    color = \"#00927B\",\n    value = stock_price\n    \n    )\n```\n\n\n```{python}\n#| content: valuebox\n#| title: Beta\n#| fill: true\n#| freeze: true\nbeta = get_beta(ticker=ticker)\ndict(\n    icon=\"\",\n    color = \"#00927B\",\n    value = beta\n    \n    )\n```\n\n\n\n```{python}\n#| content: valuebox\n#| title: WACC\n#| fill: true\n#| freeze: true\n#| cache: true\nwacc = get_wacc(ticker=ticker,risk_free_rate=0.045, \nmarket_return=0.10)\n\ndict(\n    icon = \"percent\",\n    color = \"#00927B\",\n    value = f\"{round(wacc, 3) * 100}\"\n    )\n\n```\n\n\n\n## Stock \n\n### {width=\"75%\"}\n```{python}\n#| title: Stock\n#| fill: true\n#| freeze: true\n#| cache: true\nstock = get_data(ticker)\nstock = stock.reset_index()\n\n\nfig_7 = px.line(x=stock['date'],y=stock['adjclose'])\n\nfig_7= fig_7.update_traces(line_color='#00927B')\n\n\nfig_7 = fig_7.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n    )\n\nfig_7.show()\n```\n\n\n### {width=\"25%\"}\n\n```{python}\n#| title: Forward PE\n#| content: valuebox\n#| fill: true\n#| freeze: true\n#| cache: true\nvaluation = get_valuation_metrics(ticker=ticker)\nforward_pe = valuation['ForwardPeRatio'].iloc[-1]\n\ndict(\n    icon = \"arrow-right\",\n    color = \"#00927B\",\n    value = forward_pe\n    )\n```\n\n\n```{python}\n#| title: Valuation\n#| content: valuebox\n#| fill: true\n#| freeze: true\n#| cache: true\nenterprise_value = valuation['EnterpriseValue'].iloc[-1]\n\ndict(\n    icon = 'cash',\n    color = \"#00927B\",\n    value = format_trillions(enterprise_value)\n    )\n```\n\n## Calculations \n\n```{python}\n#| title: Intrinsic Value\n#| fill: true\n#| freeze: true\n#| cache: true\nshow(get_intrinsic_value(ticker, 0.05,0.10,0.15, wacc), responsive=False, sorting=False, info=False, searching=False)\n```\n\n\n\n\n# Analyst Recommendations\n\n##\n\n```{python}\n#| title: Recommendations by Analysts\n#| fill: true\n#| freeze: true\n#| cache: true\ndf = get_recommendations(ticker = ticker)\nfig_8 = go.Figure(data=[go.Scatter(\n    x=df['period'],\n    y=df['strongBuy'],\n    mode='lines+markers',\n    name='Strong Buy',\n    line=dict(color='green')\n), go.Scatter(\n    x=df['period'],\n    y=df['buy'],\n    mode='lines+markers',\n    name='Buy',\n    line=dict(color='lightgreen')\n), go.Scatter(\n    x=df['period'],\n    y=df['hold'],\n    mode='lines+markers',\n    name='Hold',\n    line=dict(color='orange')\n), go.Scatter(\n    x=df['period'],\n    y=df['sell'],\n    mode='lines+markers',\n    name='Sell',\n    line=dict(color='red')\n), go.Scatter(\n    x=df['period'],\n    y=df['strongSell'],\n    mode='lines+markers',\n    name='Strong Sell',\n    line=dict(color='darkred')\n)])\n\nfig_8 = fig_8.update_layout(\n    title=f'Analyst Recommendation Trend for {ticker} (Last 3 months)',\n    xaxis_title='Period',\n    yaxis_title='Number of Recommendations',\n    legend_title='Recommendation',\n    hovermode='x unified',\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ), \n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    margin=dict(l=20, r=20, b=20, t=20),\n    hoverlabel=dict(bgcolor='rgba(0,0,0,0)'),\n    hoverdistance=10,  # Adjust this value as needed\n)\nfig_8.show()\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n# Overview\n\n## Stock Overview\n\n```{python}\nimport pandas as pd\nimport requests as re\nimport yfinance as yf\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom data import *\nfrom itables import show\nticker = 'GOOG'\n\ndef format_trillions(x):\n    if x >= 1e12:\n        return f'{round(x / 1e12, 2)}T'  # Rounds to 1 decimal place\n    else:\n        return x\n\n```\n\n```{python}\n#| content: valuebox\n#| title: Company\n#| freeze: true\n#| fill: true\n#| cache: true\ncompany_name = get_name(ticker=ticker)\ndict(\n    icon = \"google\",\n    color = \"#00927B\",\n    value = company_name\n)\n```\n\n```{python}\n#| content: valuebox\n#| title: Stock\n#| freeze: true\n#| fill: true\n#| cache: true\nstock_price = get_price(ticker=ticker)\n\ndict(\n    icon = \"currency-dollar\",\n    color = \"#00927B\",\n    value = stock_price\n    \n    )\n```\n\n```{python}\n#| content: valuebox\n#| title: Change\n#| fill: true\n#| freeze: true\n#| cache: true\nchange_pr = get_change(ticker=ticker)\nicon_1 = \"chevron-up\" if change_pr > 0 else \"chevron-down\"\ndict(\n    icon = icon_1,\n    color = \"#00927B\",\n    value = f\"{change_pr} %\"\n)\n```\n\n```{python}\n#| content: valuebox\n#| title: Market Cap\n#| fill: true\n#| freeze: true\n#| cache: true\nmarket_cap = get_market_cap(ticker=ticker)\nmarket_cap = format_trillions(market_cap)\ndict(\n    icon = \"bank\",\n    color = \"#00927B\",\n    value = market_cap\n)\n```\n\n## Plot\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: Revenue\n#| fill: true\n#| freeze: true\n#| cache: true\nincome_statement = get_income_statement(ticker)\n\n\nfig_1 = px.bar(data_frame = income_statement,x= income_statement['asOfDate'].dt.year, y=['TotalRevenue'], color_discrete_map={\n        'TotalRevenue': '#00927B'\n    })\n\nfig_1 = fig_1.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',bargap=0.4,showlegend=False,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\nfig_1 = fig_1.update_xaxes(type='category')\nfig_1 = fig_1.update_yaxes(ticklabelposition=\"inside top\", title=None)\nfig_1.show()\n\n\n```\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: Net Income\n#| fill: true\n#| freeze: true\n#| cache: true\nfig_2 = go.Figure(go.Bar(\n            x=income_statement[\"asOfDate\"].dt.year,\n            y=income_statement[\"NetIncome\"],\n            marker=dict(\n        color='#00927B'\n    )\n        ))\n\nfig_2 = fig_2.update_layout(\n    xaxis_title=None,\n    yaxis_title=None,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    bargap=0.4,\n    showlegend=False,\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\n\n\nfig_2 = fig_2.update_xaxes(type='category')\nfig_2.show()\n\n```\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: \"EPS\"\n#| fill: true\n#| freeze: true\n#| cache: true\nfig_3 = go.Figure(go.Bar(\n            x=income_statement[\"asOfDate\"].dt.year,\n            y=income_statement[\"BasicEPS\"],\n            marker=dict(\n        color='#00927B'\n    )\n        ))\n\n\n\nfig_3 = fig_3.update_layout(\n    xaxis_title=None,\n    yaxis_title=None,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    bargap=0.4,\n    showlegend=False,\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\n\nfig_3 = fig_3.update_xaxes(type='category')\n\nfig_3.show()\n\n```\n\n## CashAssets \n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: \"Assets\"\n#| fill: true\n#| freeze: true\n#| cache: true\nbalance_sheet = get_balance_sheet(ticker=ticker)\n\nfig_4 = px.bar(data_frame = balance_sheet,x=balance_sheet['asOfDate'].dt.year, y=['TotalAssets'], color_discrete_map={\n        'TotalAssets': '#00927B'\n    })\n\nfig_4 = fig_4.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)', showlegend=False, bargap=0.4,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n)\n\nfig_4 = fig_4.update_xaxes(type='category')\n\nfig_4.show()\n\n```\n\n\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: Liabilities\n#| fill: true\n#| freeze: true\n#| cache: true\nfig_5 = px.bar(x=balance_sheet['asOfDate'].dt.year, y=balance_sheet['TotalDebt'])\n\n\nfig_5 = fig_5.update_traces(marker_color='#00927B')\n\nfig_5 = fig_5.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',showlegend=False, bargap=0.4,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n    )\n\nfig_5 = fig_5.update_xaxes(type='category')\n\nfig_5.show()\n\n```\n\n\n```{python}\n#| jupyter_compat: true\n#| echo: false\n#| title: \"Free Cash Flow\"\n#| fill: true\n#| freeze: true\n#| cache: true\ncash_flow = get_cash_flow_statement(ticker=ticker)\n\nfig_6 = px.bar(x=cash_flow['asOfDate'].dt.year, y=cash_flow['FreeCashFlow'])\n\n\nfig_6 = fig_6.update_traces(marker_color='#00927B')\n\nfig_6 = fig_6.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)', showlegend=False, bargap=0.4,\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n    )\n\nfig_6 = fig_6.update_xaxes(type='category')\nfig_6.show()\n\n```\n\n\n\n\n\n# Valuation\n\n## Stats\n\n```{python}\n#| content: valuebox\n#| title: P/E Ratio\n#| fill: true\n#| freeze: true\n#| cache: true\npe_ratio = round(get_pe_ratio(ticker=ticker),2)\n\ndict(\n    icon = \"ratio\",\n    color = \"#00927B\",\n    value = pe_ratio\n    \n    )\n```\n\n\n\n```{python}\n#| content: valuebox\n#| title: Current Price\n#| fill: true\n#| freeze: true\n#| cache: true\ndict(\n    icon = \"currency-dollar\",\n    color = \"#00927B\",\n    value = stock_price\n    \n    )\n```\n\n\n```{python}\n#| content: valuebox\n#| title: Beta\n#| fill: true\n#| freeze: true\nbeta = get_beta(ticker=ticker)\ndict(\n    icon=\"\",\n    color = \"#00927B\",\n    value = beta\n    \n    )\n```\n\n\n\n```{python}\n#| content: valuebox\n#| title: WACC\n#| fill: true\n#| freeze: true\n#| cache: true\nwacc = get_wacc(ticker=ticker,risk_free_rate=0.045, \nmarket_return=0.10)\n\ndict(\n    icon = \"percent\",\n    color = \"#00927B\",\n    value = f\"{round(wacc, 3) * 100}\"\n    )\n\n```\n\n\n\n## Stock \n\n### {width=\"75%\"}\n```{python}\n#| title: Stock\n#| fill: true\n#| freeze: true\n#| cache: true\nstock = get_data(ticker)\nstock = stock.reset_index()\n\n\nfig_7 = px.line(x=stock['date'],y=stock['adjclose'])\n\nfig_7= fig_7.update_traces(line_color='#00927B')\n\n\nfig_7 = fig_7.update_layout(xaxis_title=None,yaxis_title=None, plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(l=20, r=20, b=20, t=20)\n    )\n\nfig_7.show()\n```\n\n\n### {width=\"25%\"}\n\n```{python}\n#| title: Forward PE\n#| content: valuebox\n#| fill: true\n#| freeze: true\n#| cache: true\nvaluation = get_valuation_metrics(ticker=ticker)\nforward_pe = valuation['ForwardPeRatio'].iloc[-1]\n\ndict(\n    icon = \"arrow-right\",\n    color = \"#00927B\",\n    value = forward_pe\n    )\n```\n\n\n```{python}\n#| title: Valuation\n#| content: valuebox\n#| fill: true\n#| freeze: true\n#| cache: true\nenterprise_value = valuation['EnterpriseValue'].iloc[-1]\n\ndict(\n    icon = 'cash',\n    color = \"#00927B\",\n    value = format_trillions(enterprise_value)\n    )\n```\n\n## Calculations \n\n```{python}\n#| title: Intrinsic Value\n#| fill: true\n#| freeze: true\n#| cache: true\nshow(get_intrinsic_value(ticker, 0.05,0.10,0.15, wacc), responsive=False, sorting=False, info=False, searching=False)\n```\n\n\n\n\n# Analyst Recommendations\n\n##\n\n```{python}\n#| title: Recommendations by Analysts\n#| fill: true\n#| freeze: true\n#| cache: true\ndf = get_recommendations(ticker = ticker)\nfig_8 = go.Figure(data=[go.Scatter(\n    x=df['period'],\n    y=df['strongBuy'],\n    mode='lines+markers',\n    name='Strong Buy',\n    line=dict(color='green')\n), go.Scatter(\n    x=df['period'],\n    y=df['buy'],\n    mode='lines+markers',\n    name='Buy',\n    line=dict(color='lightgreen')\n), go.Scatter(\n    x=df['period'],\n    y=df['hold'],\n    mode='lines+markers',\n    name='Hold',\n    line=dict(color='orange')\n), go.Scatter(\n    x=df['period'],\n    y=df['sell'],\n    mode='lines+markers',\n    name='Sell',\n    line=dict(color='red')\n), go.Scatter(\n    x=df['period'],\n    y=df['strongSell'],\n    mode='lines+markers',\n    name='Strong Sell',\n    line=dict(color='darkred')\n)])\n\nfig_8 = fig_8.update_layout(\n    title=f'Analyst Recommendation Trend for {ticker} (Last 3 months)',\n    xaxis_title='Period',\n    yaxis_title='Number of Recommendations',\n    legend_title='Recommendation',\n    hovermode='x unified',\n    xaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False\n    ), \n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    margin=dict(l=20, r=20, b=20, t=20),\n    hoverlabel=dict(bgcolor='rgba(0,0,0,0)'),\n    hoverdistance=10,  # Adjust this value as needed\n)\nfig_8.show()\n```\n\n\n\n"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"financialreport.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.43","page-layout":"custom","title":"Financial Analysis","date":"2025-04-19","orientation":"rows","scrolling":true,"theme":["custom.scss"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}