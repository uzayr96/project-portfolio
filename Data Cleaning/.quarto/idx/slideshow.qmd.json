{"title":"Bringing boring data to life","markdown":{"yaml":{"title":"Bringing boring data to life","author":"Uzair Ahmed","date":"2024-05-01","format":{"revealjs":{"theme":"custom.scss","slide-number":true,"auto-animate":true,"logo":"/images/logo.jpg","transition":"fade","incremental":true,"width":1600,"height":800,"show-slide-number":"all","footer":"[quarto.org](https://{{< meta prerelease-subdomain >}}quarto.org)","preview-links":"auto","controls":true,"code-overflow":"wrap","chalkboard":true,"css":"custom.css"}},"execute":{"cache":true}},"headingText":"Data Process","headingAttr":{"id":"","classes":[],"keyvalue":[["transition","zoom"],["transition-speed","slow"]]},"containsRefs":false,"markdown":"\n\n```{python}\n#| include: false\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom itables import show\npd.set_option('display.max_columns', 500)\ndf = pd.read_csv(\"Data/train.csv\")\n\nbutton_css = \"\"\"\n.dataTables_wrapper .dataTables_paginate .paginate_button,\n.dataTables_wrapper .dataTables_length select {\n    padding: 0.2em 0.5em; /* Adjust vertical and horizontal padding */\n    font-size: 0.6em; /* Reduce font size */\n    margin: 0 0.1em; /* Adjust spacing */\n}\n.dataTables_wrapper .dataTables_length label,\n.dataTables_wrapper .dataTables_filter label {\n    font-size: 0.9em; /* Adjust label font size if needed */\n}\n\"\"\"\n\n```\n\n\n::: {.callout title=\"Data Cleaning\" .fade-in-then-out}\n\n**Data cleaning** is a crucial process that involves identifying and correcting errors, inconsistencies, and inaccuracies in datasets. Its importance stems from the significant impact it has on the reliability and effectiveness of data-driven decision-making\n\n:::\n\n![](/images/data.jpeg){fig-align=\"center\" width=\"75%\"}\n\n\n\n::: {.callout-important title=\"Pros of clean data\"}\n\n- Improves Accuracy and Reliability of Analysis\n- Decisions based on clean, high-quality data are more likely to be effective and aligned with business goals\n- Accurate data allows for a clearer understanding of trends, customer behavior, and market dynamics, enabling organizations to identify opportunities and mitigate risks effectively\n- Clean data ensures that reports and analyses are trustworthy, leading to greater confidence among stakeholders\n- Clean data facilitates smoother data integration and processing across different systems and applications\n- Poor data quality can lead to mistakes like overstocking inventory, misinterpreting customer behavior, and inefficient marketing campaigns, all of which can result in significant financial losses\n\n:::\n\n\n\n::: {.callout-warning title=\"What to watch out for\"}\n\n- Garbage in, garbage out\n- Avoids costly errors\n- Storage costs\n- Regulatory requirements\n- Security risks\n:::\n\n![](/images/messy.jpeg){fig-align=\"center\" width=\"75%\"}\n\n\n\n\n## Data Process {transition=\"concave\" transition-speed=\"slow\"}\n\n![](/images/process.png){fig-align=\"center\" width=\"100%\"}\n\n## Data Investigation {transition=\"concave\" transition-speed=\"slow\"}\n\n\n:::: {.columns}\n\n::: {.column width=\"100%\"}\n\n```{python}\n#| echo: true\n#| output-location: column\n#| code-line-numbers: \"1|2\"\nprint(f\"Rows: {df.shape[0]}\")\nprint(f\"Columns: {df.shape[1]}\")\n```\n:::\n\n::::\n\n\n## Data Investigation {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: false\ndf.head(5)\n```\n\n\n## Missing Values..... {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| code-overflow: wrap\n#| output-location: column-fragment\nmissing=(df.isnull().sum() / len(df)) * 100\n\n## Missing percentage > 0\nmissing=missing[missing > 0] \n\n## Convert to dataframe and sort values\nmissing_df=pd.DataFrame({'Missing Values' : missing})\nmissing_df=missing_df['Missing Values'].sort_values(ascending = False)\n\nf, ax = plt.subplots(figsize=(6,6))\nsns.barplot(x=missing_df.index, y=missing_df.values, ax=ax)\nplt.title('Columns with missing Values', fontsize = 14)\nplt.xlabel('', fontsize = 10)\nplt.ylabel('%', fontsize = 10)\nplt.xticks(rotation = 'vertical')\nplt.show()\n\n```\n\n## Remove Columns {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column\n\ncols_to_drop = missing[missing > 60].index\ndf_cleaned = df.drop(columns=cols_to_drop)\n\n# Compare the number of columns\ncompare_data={\n'Data': ['Raw', 'Cleaned Data'],\n'Columns': [df.shape[1], df_cleaned.shape[1]]\n}\n\nprint(pd.DataFrame(compare_data))\n\n```\n\n## Missing value imputation {transition=\"concave\" transition-speed=\"slow\"}\n\n### Filling with None\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column-fragment\n#| code-overflow: wrap\ncols=['FireplaceQu',\n'GarageType', \n'GarageFinish',\n'GarageQual', \n'GarageCond', \n'BsmtQual', \n'BsmtCond',\n'BsmtExposure',\n'BsmtFinType1', \n'BsmtFinType2',\n'MasVnrType', \n'MSSubClass']\nfor col in cols:\n    df_cleaned[col] = df_cleaned[col].fillna('None')\n\ndf_cleaned['FireplaceQu'].value_counts()\n\n```\n\n## Missing value imputation {transition=\"concave\" transition-speed=\"slow\"}\n\n### Filling with 0\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column-fragment\n#| code-overflow: wrap\ncolumns = ['BsmtFinSF1', \n'BsmtFinSF2', \n'BsmtUnfSF',\n'TotalBsmtSF',\n'BsmtFullBath', \n'BsmtHalfBath',\n'MasVnrArea', \n'GarageYrBlt', \n'GarageArea', \n'GarageCars']\nfor col in columns:\n    df_cleaned[col] = df_cleaned[col].fillna(0)\n\nprint(df_cleaned[cols].isnull().sum())\n\n\n```\n\n## Missing value imputation {transition=\"concave\" transition-speed=\"slow\"}\n\n### Filling with Median\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned[\"LotFrontage\"] = df_cleaned.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\nlot_front = df_cleaned[\"LotFrontage\"].isnull().sum()\nprint(f\"Neighborhoods with remaining missing LotFrontage: {lot_front}\")\n\n```\n\n## Remove columns with near zero variance {transition=\"concave\" transition-speed=\"slow\"}\n\n### Identify Near Zero variance\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nnear_zero_variance_cols = []\nfor col in df_cleaned.select_dtypes(include='object').columns:\n    value_counts = df[col].value_counts(normalize=True)\n    if len(value_counts) > 0 and value_counts.iloc[0] >= 0.8:\n        near_zero_variance_cols.append(col)\nprint(near_zero_variance_cols)\n```\n\n## Remove columns with near zero variance {transition=\"concave\" transition-speed=\"slow\"}\n\n### Drop the near zero variance\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned = df_cleaned.drop(columns=near_zero_variance_cols)\ncompare_data = {\n    'Dataset': ['Raw Data', 'Cleaned Data'],\n    'Number of Columns': [df.shape[1], df_cleaned.shape[1]]\n}\nprint(pd.DataFrame(compare_data).to_string(index=False))\n```\n\n## So, How does the cleaned data look like? {transition=\"concave\" transition-speed=\"slow\"}\n\n### Take a Peak\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nprint(df_cleaned.isnull().sum())\n```\n\n## And what about the column types? {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nprint(df_cleaned.dtypes)\n```\n\n## {transition=\"concave\" transition-speed=\"slow\"}\n\n### Numeric to Categorical\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column-fragment\ncols = [\"MSSubClass\", \n\"OverallCond\", \n\"YrSold\", \n\"MoSold\"]\nfor col in cols:\n    df_cleaned[col]=df_cleaned[col].astype(str)\n\nprint(df_cleaned[cols].dtypes)\n```\n\n# Feature Engineering {transition=\"zoom\" transition-speed=\"slow\"}\n\n## Total Area {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned['TotalArea'] = df_cleaned['TotalBsmtSF'] + df_cleaned['1stFlrSF'] + df_cleaned['2ndFlrSF']\ndf_cleaned[['TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'TotalArea']].head()\n```\n\n## Label Encoding {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\nclean_variables = {\"LotShape\": {\"IR3\": 0, \"IR2\": 1, \"IR1\": 2, \"Reg\": 3},\n                   \"ExterQual\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                   \"ExterCond\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                   \"BsmtQual\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"BsmtCond\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"BsmtExposure\": {\"None\": 0, \"No\": 1, \"Mn\": 2, \"Av\": 3, \"Gd\": 4},\n                  \"BsmtFinType1\": {\"None\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6},\n                  \"BsmtFinType2\": {\"None\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6},\n                  \"HeatingQC\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"KitchenQual\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                   \"FireplaceQu\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"GarageFinish\": {\"None\": 0, \"Unf\": 1, \"RFn\": 2, \"Fin\": 3},\n                  \"GarageQual\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"GarageCond\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"Fence\": {\"None\": 0, \"MnWw\": 1, \"GdWw\": 2, \"MnPrv\": 3, \"GdPrv\": 4}}\n\ndf_cleaned.replace(clean_variables, inplace=True)\n```\n\n# Data Analysis {transition=\"zoom\" transition-speed=\"slow\"}\n\n## Price vs Living Area {transition=\"concave\" transition-speed=\"slow\"}\n\n### With Outlier\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nplt.scatter(df_cleaned['GrLivArea'], df_cleaned['SalePrice'])\nplt.xlabel('Living Area')\nplt.ylabel('Sale Price')\nplt.show()\n```\n\n## Price vs Total Area {transition=\"concave\" transition-speed=\"slow\"}\n\n### Without Outlier\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned = df_cleaned.drop(df_cleaned[(df_cleaned['GrLivArea'] > 4000) & (df_cleaned['SalePrice'] < 300000)].index)\nplt.scatter(df_cleaned['TotalArea'], df_cleaned['SalePrice'])\nplt.title('')\nplt.xlabel('Total Area')\nplt.ylabel('Sale Price')\nplt.show()\n\n```\n\n## Price vs Overall Quality {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nsns.boxplot(x = df_cleaned['OverallQual'],\n            y = df_cleaned['SalePrice'])\nplt.show()\n```\n\n## Price vs Overall Quality {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nplt.figure(figsize=(12, 5))\nsns.boxplot(x = df_cleaned['Neighborhood'],\n            y = df_cleaned['SalePrice'])\nplt.title('Sales Price And Neighbourhood')\nplt.xticks(rotation = 90)\nplt.show()\n```\n\n## Price vs House Style {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nplt.figure(figsize=(12, 5))\nsns.boxplot(x = df_cleaned['HouseStyle'],\n            y = df_cleaned['SalePrice'])\nplt.xticks(rotation = 90)\nplt.show()\n\n```\n\n## Statistics {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: slide\nhouses_sold_per_neighborhood = df_cleaned.groupby('Neighborhood').size().reset_index(name='Number of Houses Sold')\n\naverage_price_per_neighborhood = df_cleaned.groupby('Neighborhood')['SalePrice'].mean().reset_index(name='Average Sale Price')\n\nneighborhood_sales_summary = pd.merge(houses_sold_per_neighborhood, average_price_per_neighborhood, on='Neighborhood')\n\nshow(neighborhood_sales_summary, scrollY=\"300px\", scrollCollapse=True, paging=False, buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"], classes=\"display nowrap table_with_monospace_font\", searching=False)\n```\n\n## Most Expensive {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: slide\ndf_exp = df_cleaned.sort_values(by='SalePrice', ascending=False)\n\ntop_10_exp = df_exp.head(10)\ntop_10_exp = top_10_exp.reset_index(drop=True)\n# Display the top 10 most expensive houses using itables\nshow(top_10_exp,\n     scrollY=\"300px\",\n     scrollCollapse=True,\n     paging=False,\n     classes=\"display compact cell-border\",\n     caption=\"Top 10 Most Expensive Houses\",\n     index=False,\n     buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"])\n\n```\n\n# Conclusion {transition=\"concave\" transition-speed=\"slow\"}\n\n## Conclusion {auto-animate-easing=\"ease-in-out\"}\n\n- Data cleaning and processing are not merely preliminary tasks; they are integral to unlocking the true potential of data\n- Investing time and resources in these stages yields significant returns in the form of enhanced accuracy, improved efficiency, reduced costs, and more confident, data-driven strategies\n\n::: {.r-stack}\n![&nbsp;](images/messy_lego.jpeg){.fragment height=\"300\"}\n\n![&nbsp;](images/clean.jpeg){.fragment height=\"300\"}\n\n:::\n\n## Conclusion {transition=\"concave\" transition-speed=\"slow\"}\n\n::: {.panel-tabset}\n\n### Raw\n\n```{python}\nshow(df,\n     scrollY=\"200px\",\n     scrollCollapse=True,\n     paging=False,\n     classes=\"display compact cell-border\",\n     index=False,\n     buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"],\n    style=button_css)\n```\n\n### Cleaned\n\n```{python}\nshow(df_cleaned.reset_index(drop=True),\n     scrollY=\"200px\",\n     scrollCollapse=True,\n     paging=False,\n     classes=\"display compact cell-border\",\n     caption=\"View of cleaned data\",\n     index=False,\n     buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"],\n     style=button_css)\n```\n\n:::\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n```{python}\n#| include: false\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom itables import show\npd.set_option('display.max_columns', 500)\ndf = pd.read_csv(\"Data/train.csv\")\n\nbutton_css = \"\"\"\n.dataTables_wrapper .dataTables_paginate .paginate_button,\n.dataTables_wrapper .dataTables_length select {\n    padding: 0.2em 0.5em; /* Adjust vertical and horizontal padding */\n    font-size: 0.6em; /* Reduce font size */\n    margin: 0 0.1em; /* Adjust spacing */\n}\n.dataTables_wrapper .dataTables_length label,\n.dataTables_wrapper .dataTables_filter label {\n    font-size: 0.9em; /* Adjust label font size if needed */\n}\n\"\"\"\n\n```\n\n## \n\n::: {.callout title=\"Data Cleaning\" .fade-in-then-out}\n\n**Data cleaning** is a crucial process that involves identifying and correcting errors, inconsistencies, and inaccuracies in datasets. Its importance stems from the significant impact it has on the reliability and effectiveness of data-driven decision-making\n\n:::\n\n![](/images/data.jpeg){fig-align=\"center\" width=\"75%\"}\n\n\n## {transition=\"concave\" transition-speed=\"slow\"}\n\n::: {.callout-important title=\"Pros of clean data\"}\n\n- Improves Accuracy and Reliability of Analysis\n- Decisions based on clean, high-quality data are more likely to be effective and aligned with business goals\n- Accurate data allows for a clearer understanding of trends, customer behavior, and market dynamics, enabling organizations to identify opportunities and mitigate risks effectively\n- Clean data ensures that reports and analyses are trustworthy, leading to greater confidence among stakeholders\n- Clean data facilitates smoother data integration and processing across different systems and applications\n- Poor data quality can lead to mistakes like overstocking inventory, misinterpreting customer behavior, and inefficient marketing campaigns, all of which can result in significant financial losses\n\n:::\n\n\n## {transition=\"concave\" transition-speed=\"slow\"}\n\n::: {.callout-warning title=\"What to watch out for\"}\n\n- Garbage in, garbage out\n- Avoids costly errors\n- Storage costs\n- Regulatory requirements\n- Security risks\n:::\n\n![](/images/messy.jpeg){fig-align=\"center\" width=\"75%\"}\n\n\n# Data Process {transition=\"zoom\" transition-speed=\"slow\"}\n\n\n## Data Process {transition=\"concave\" transition-speed=\"slow\"}\n\n![](/images/process.png){fig-align=\"center\" width=\"100%\"}\n\n## Data Investigation {transition=\"concave\" transition-speed=\"slow\"}\n\n\n:::: {.columns}\n\n::: {.column width=\"100%\"}\n\n```{python}\n#| echo: true\n#| output-location: column\n#| code-line-numbers: \"1|2\"\nprint(f\"Rows: {df.shape[0]}\")\nprint(f\"Columns: {df.shape[1]}\")\n```\n:::\n\n::::\n\n\n## Data Investigation {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: false\ndf.head(5)\n```\n\n\n## Missing Values..... {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| code-overflow: wrap\n#| output-location: column-fragment\nmissing=(df.isnull().sum() / len(df)) * 100\n\n## Missing percentage > 0\nmissing=missing[missing > 0] \n\n## Convert to dataframe and sort values\nmissing_df=pd.DataFrame({'Missing Values' : missing})\nmissing_df=missing_df['Missing Values'].sort_values(ascending = False)\n\nf, ax = plt.subplots(figsize=(6,6))\nsns.barplot(x=missing_df.index, y=missing_df.values, ax=ax)\nplt.title('Columns with missing Values', fontsize = 14)\nplt.xlabel('', fontsize = 10)\nplt.ylabel('%', fontsize = 10)\nplt.xticks(rotation = 'vertical')\nplt.show()\n\n```\n\n## Remove Columns {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column\n\ncols_to_drop = missing[missing > 60].index\ndf_cleaned = df.drop(columns=cols_to_drop)\n\n# Compare the number of columns\ncompare_data={\n'Data': ['Raw', 'Cleaned Data'],\n'Columns': [df.shape[1], df_cleaned.shape[1]]\n}\n\nprint(pd.DataFrame(compare_data))\n\n```\n\n## Missing value imputation {transition=\"concave\" transition-speed=\"slow\"}\n\n### Filling with None\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column-fragment\n#| code-overflow: wrap\ncols=['FireplaceQu',\n'GarageType', \n'GarageFinish',\n'GarageQual', \n'GarageCond', \n'BsmtQual', \n'BsmtCond',\n'BsmtExposure',\n'BsmtFinType1', \n'BsmtFinType2',\n'MasVnrType', \n'MSSubClass']\nfor col in cols:\n    df_cleaned[col] = df_cleaned[col].fillna('None')\n\ndf_cleaned['FireplaceQu'].value_counts()\n\n```\n\n## Missing value imputation {transition=\"concave\" transition-speed=\"slow\"}\n\n### Filling with 0\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column-fragment\n#| code-overflow: wrap\ncolumns = ['BsmtFinSF1', \n'BsmtFinSF2', \n'BsmtUnfSF',\n'TotalBsmtSF',\n'BsmtFullBath', \n'BsmtHalfBath',\n'MasVnrArea', \n'GarageYrBlt', \n'GarageArea', \n'GarageCars']\nfor col in columns:\n    df_cleaned[col] = df_cleaned[col].fillna(0)\n\nprint(df_cleaned[cols].isnull().sum())\n\n\n```\n\n## Missing value imputation {transition=\"concave\" transition-speed=\"slow\"}\n\n### Filling with Median\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned[\"LotFrontage\"] = df_cleaned.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\nlot_front = df_cleaned[\"LotFrontage\"].isnull().sum()\nprint(f\"Neighborhoods with remaining missing LotFrontage: {lot_front}\")\n\n```\n\n## Remove columns with near zero variance {transition=\"concave\" transition-speed=\"slow\"}\n\n### Identify Near Zero variance\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nnear_zero_variance_cols = []\nfor col in df_cleaned.select_dtypes(include='object').columns:\n    value_counts = df[col].value_counts(normalize=True)\n    if len(value_counts) > 0 and value_counts.iloc[0] >= 0.8:\n        near_zero_variance_cols.append(col)\nprint(near_zero_variance_cols)\n```\n\n## Remove columns with near zero variance {transition=\"concave\" transition-speed=\"slow\"}\n\n### Drop the near zero variance\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned = df_cleaned.drop(columns=near_zero_variance_cols)\ncompare_data = {\n    'Dataset': ['Raw Data', 'Cleaned Data'],\n    'Number of Columns': [df.shape[1], df_cleaned.shape[1]]\n}\nprint(pd.DataFrame(compare_data).to_string(index=False))\n```\n\n## So, How does the cleaned data look like? {transition=\"concave\" transition-speed=\"slow\"}\n\n### Take a Peak\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nprint(df_cleaned.isnull().sum())\n```\n\n## And what about the column types? {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nprint(df_cleaned.dtypes)\n```\n\n## {transition=\"concave\" transition-speed=\"slow\"}\n\n### Numeric to Categorical\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: column-fragment\ncols = [\"MSSubClass\", \n\"OverallCond\", \n\"YrSold\", \n\"MoSold\"]\nfor col in cols:\n    df_cleaned[col]=df_cleaned[col].astype(str)\n\nprint(df_cleaned[cols].dtypes)\n```\n\n# Feature Engineering {transition=\"zoom\" transition-speed=\"slow\"}\n\n## Total Area {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned['TotalArea'] = df_cleaned['TotalBsmtSF'] + df_cleaned['1stFlrSF'] + df_cleaned['2ndFlrSF']\ndf_cleaned[['TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'TotalArea']].head()\n```\n\n## Label Encoding {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\nclean_variables = {\"LotShape\": {\"IR3\": 0, \"IR2\": 1, \"IR1\": 2, \"Reg\": 3},\n                   \"ExterQual\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                   \"ExterCond\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                   \"BsmtQual\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"BsmtCond\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"BsmtExposure\": {\"None\": 0, \"No\": 1, \"Mn\": 2, \"Av\": 3, \"Gd\": 4},\n                  \"BsmtFinType1\": {\"None\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6},\n                  \"BsmtFinType2\": {\"None\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6},\n                  \"HeatingQC\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"KitchenQual\": {\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                   \"FireplaceQu\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"GarageFinish\": {\"None\": 0, \"Unf\": 1, \"RFn\": 2, \"Fin\": 3},\n                  \"GarageQual\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"GarageCond\": {\"None\": 0,\"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n                  \"Fence\": {\"None\": 0, \"MnWw\": 1, \"GdWw\": 2, \"MnPrv\": 3, \"GdPrv\": 4}}\n\ndf_cleaned.replace(clean_variables, inplace=True)\n```\n\n# Data Analysis {transition=\"zoom\" transition-speed=\"slow\"}\n\n## Price vs Living Area {transition=\"concave\" transition-speed=\"slow\"}\n\n### With Outlier\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nplt.scatter(df_cleaned['GrLivArea'], df_cleaned['SalePrice'])\nplt.xlabel('Living Area')\nplt.ylabel('Sale Price')\nplt.show()\n```\n\n## Price vs Total Area {transition=\"concave\" transition-speed=\"slow\"}\n\n### Without Outlier\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\ndf_cleaned = df_cleaned.drop(df_cleaned[(df_cleaned['GrLivArea'] > 4000) & (df_cleaned['SalePrice'] < 300000)].index)\nplt.scatter(df_cleaned['TotalArea'], df_cleaned['SalePrice'])\nplt.title('')\nplt.xlabel('Total Area')\nplt.ylabel('Sale Price')\nplt.show()\n\n```\n\n## Price vs Overall Quality {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nsns.boxplot(x = df_cleaned['OverallQual'],\n            y = df_cleaned['SalePrice'])\nplt.show()\n```\n\n## Price vs Overall Quality {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nplt.figure(figsize=(12, 5))\nsns.boxplot(x = df_cleaned['Neighborhood'],\n            y = df_cleaned['SalePrice'])\nplt.title('Sales Price And Neighbourhood')\nplt.xticks(rotation = 90)\nplt.show()\n```\n\n## Price vs House Style {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: fragment\nplt.figure(figsize=(12, 5))\nsns.boxplot(x = df_cleaned['HouseStyle'],\n            y = df_cleaned['SalePrice'])\nplt.xticks(rotation = 90)\nplt.show()\n\n```\n\n## Statistics {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: slide\nhouses_sold_per_neighborhood = df_cleaned.groupby('Neighborhood').size().reset_index(name='Number of Houses Sold')\n\naverage_price_per_neighborhood = df_cleaned.groupby('Neighborhood')['SalePrice'].mean().reset_index(name='Average Sale Price')\n\nneighborhood_sales_summary = pd.merge(houses_sold_per_neighborhood, average_price_per_neighborhood, on='Neighborhood')\n\nshow(neighborhood_sales_summary, scrollY=\"300px\", scrollCollapse=True, paging=False, buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"], classes=\"display nowrap table_with_monospace_font\", searching=False)\n```\n\n## Most Expensive {transition=\"concave\" transition-speed=\"slow\"}\n\n```{python}\n#| echo: true\n#| output: true\n#| output-location: slide\ndf_exp = df_cleaned.sort_values(by='SalePrice', ascending=False)\n\ntop_10_exp = df_exp.head(10)\ntop_10_exp = top_10_exp.reset_index(drop=True)\n# Display the top 10 most expensive houses using itables\nshow(top_10_exp,\n     scrollY=\"300px\",\n     scrollCollapse=True,\n     paging=False,\n     classes=\"display compact cell-border\",\n     caption=\"Top 10 Most Expensive Houses\",\n     index=False,\n     buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"])\n\n```\n\n# Conclusion {transition=\"concave\" transition-speed=\"slow\"}\n\n## Conclusion {auto-animate-easing=\"ease-in-out\"}\n\n- Data cleaning and processing are not merely preliminary tasks; they are integral to unlocking the true potential of data\n- Investing time and resources in these stages yields significant returns in the form of enhanced accuracy, improved efficiency, reduced costs, and more confident, data-driven strategies\n\n::: {.r-stack}\n![&nbsp;](images/messy_lego.jpeg){.fragment height=\"300\"}\n\n![&nbsp;](images/clean.jpeg){.fragment height=\"300\"}\n\n:::\n\n## Conclusion {transition=\"concave\" transition-speed=\"slow\"}\n\n::: {.panel-tabset}\n\n### Raw\n\n```{python}\nshow(df,\n     scrollY=\"200px\",\n     scrollCollapse=True,\n     paging=False,\n     classes=\"display compact cell-border\",\n     index=False,\n     buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"],\n    style=button_css)\n```\n\n### Cleaned\n\n```{python}\nshow(df_cleaned.reset_index(drop=True),\n     scrollY=\"200px\",\n     scrollCollapse=True,\n     paging=False,\n     classes=\"display compact cell-border\",\n     caption=\"View of cleaned data\",\n     index=False,\n     buttons=[\"copyHtml5\", \"csvHtml5\", \"excelHtml5\"],\n     style=button_css)\n```\n\n:::\n\n\n\n\n\n\n\n\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"css":["custom.css"],"output-file":"slideshow.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.43","auto-stretch":true,"title":"Bringing boring data to life","author":"Uzair Ahmed","date":"2024-05-01","theme":"custom.scss","slideNumber":true,"autoAnimate":true,"logo":"/images/logo.jpg","transition":"fade","width":1600,"height":800,"showSlideNumber":"all","footer":"[quarto.org](https://{{< meta prerelease-subdomain >}}quarto.org)","previewLinks":"auto","controls":true,"chalkboard":true}}},"projectFormats":[]}